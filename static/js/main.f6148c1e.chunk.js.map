{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","href","project","site","className","key","id","name","language","langs","CardList","projects","reverse","map","SearchBox","placeholder","handleChange","type","onChange","projectsData","App","useState","searchfield","setSearchfield","filteredProjects","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRAGaA,G,YAAO,SAAAC,GAAK,OACrB,uBAAGC,KAAMD,EAAME,QAAQC,MACnB,yBAAKC,UAAU,kBACf,wBAAIC,IAAKL,EAAME,QAAQI,IAAvB,IAA6BN,EAAME,QAAQK,KAA3C,KACA,2BAAIP,EAAME,QAAQM,UAClB,2BAAG,2BAAIR,EAAME,QAAQO,YCJhBC,EAAW,SAAAV,GAAK,OACzB,yBAAKI,UAAU,aACVJ,EAAMW,SAASC,UAAUC,KAAI,SAAAX,GAAO,OACjC,kBAAC,EAAD,CAAMG,IAAI,aAAaH,QAASA,SCJ/BY,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgEjEG,EApEM,CACnB,CACEZ,KAAM,cACND,GAAI,MACJE,SACE,gFACFL,KAAK,eACLM,MAAM,4BAER,CACEF,KAAM,iBACND,GAAI,MACJE,SACE,oEACFL,KAAK,WACLM,MAAM,4BAER,CACEF,KAAM,iBACND,GAAI,MACJE,SAAU,yDACVL,KAAK,YACLM,MAAM,cAER,CACEF,KAAM,cACND,GAAI,MACJE,SAAU,4CACVL,KAAK,uCACLM,MAAM,qBAER,CACEF,KAAM,YACND,GAAI,MACJE,SAAU,8CACVL,KAAK,QACLM,MAAM,4BAER,CACEF,KAAM,YACND,GAAI,MACJE,SAAU,kEACVL,KAAK,aACLM,MAAM,4BAER,CACEF,KAAM,UACND,GAAI,MACJE,SAAU,8CACVL,KAAK,+CACLM,MAAM,mBAER,CACEF,KAAM,gBACND,GAAI,MACJE,SAAU,4DACVL,KAAK,UACLM,MAAM,4BAER,CACEF,KAAM,YACND,GAAI,MACJE,SAAU,kDACVL,KAAK,uBACLM,MAAM,0BCnCKW,EAvBH,WAAO,IAAD,EACgBC,mBAASF,GADzB,mBACTR,EADS,aAEsBU,mBAAS,KAF/B,mBAETC,EAFS,KAEIC,EAFJ,KAQVC,EAAmBb,EAASc,QAChC,SAACvB,GAAD,OACEA,EAAQK,KAAKmB,cAAcC,SAASL,EAAYI,gBAChDxB,EAAQO,MAAMiB,cAAcC,SAASL,EAAYI,kBAGrD,OACE,yBAAKtB,UAAU,OACb,wBAAIA,UAAU,SAAd,eACA,kBAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAbxB,SAACY,GACpBL,EAAeK,EAAEC,OAAOC,UAatB,kBAAC,EAAD,CAAUnB,SAAUa,MCZNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6148c1e.chunk.js","sourcesContent":["import React from 'react';\nimport './card.component.css'\n\nexport const Card = props => (\n    <a href={props.project.site}>\n        <div className='card-container'>\n        <h1 key={props.project.id}> {props.project.name} </h1>\n        <p>{props.project.language}</p>\n        <p><b>{props.project.langs}</b></p>\n    </div>\n    </a>\n);","import React from 'react';\nimport './card-list.component.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.projects.reverse().map(project => (\n            <Card key=\"project.id\" project={project} />\n        ))}\n    </div>\n);","import React from 'react';\nimport './search-box.component.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n);","const projectsData = [\n  {\n    name: 'Corona Test',\n    id: 'pr1',\n    language:\n      'Tells you your chances of being infected from covid19 based on your symptoms.',\n    site: `/amiinfected`,\n    langs: `HTML5, CSS3 & Vanilla JS`,\n  },\n  {\n    name: 'Simple Weather',\n    id: 'pr2',\n    language:\n      'Displays weather in a minimallistic manner using AccuWeather API.',\n    site: `/weather`,\n    langs: `HTML5, CSS3 & Vanilla JS`,\n  },\n  {\n    name: 'Router Library',\n    id: 'pr3',\n    language: 'Router library that handles SPA routing in vanilla JS.',\n    site: `/routerjs`,\n    langs: `Vanilla JS`,\n  },\n  {\n    name: 'Flappy Bird',\n    id: 'pr4',\n    language: 'A single player desktop flappy bird game.',\n    site: `https://github.com/RohanLodhi/flappy`,\n    langs: `Python3 & PyGames`,\n  },\n  {\n    name: 'To Do pwa',\n    id: 'pr5',\n    language: 'A progressive web app for your to do lists.',\n    site: `/todo`,\n    langs: `HTML5, CSS3 & Vanilla JS`,\n  },\n  {\n    name: 'Portfolio',\n    id: 'pr6',\n    language: 'A simple and minimalist portfolio website showcasing my skills.',\n    site: `/portfolio`,\n    langs: `HTML5, CSS3 & Vanilla JS`,\n  },\n  {\n    name: 'Hangman',\n    id: 'pr7',\n    language: 'Single player CLI hangman games for school.',\n    site: `https://github.com/RohanLodhi/hangman-school`,\n    langs: ` Python3 & C++ `,\n  },\n  {\n    name: 'Sudoku solver',\n    id: 'pr8',\n    language: 'Sudoku solver that uses back tracking algorithm to solve.',\n    site: `/sudoku`,\n    langs: `HTML5, CSS3 & Vanilla JS`,\n  },\n  {\n    name: 'Reactango',\n    id: 'pr9',\n    language: 'Coding challenges website for a discord server.',\n    site: `https://reactango.tk`,\n    langs: `HTML5, CSS3 & ReactJS`,\n  },\n];\n\nexport default projectsData;\n","import React, { useState } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport projectsData from './data';\n\nconst App = () => {\n  const [projects, setProjects] = useState(projectsData);\n  const [searchfield, setSearchfield] = useState('');\n\n  const handleChange = (e) => {\n    setSearchfield(e.target.value);\n  };\n\n  const filteredProjects = projects.filter(\n    (project) =>\n      project.name.toLowerCase().includes(searchfield.toLowerCase()) ||\n      project.langs.toLowerCase().includes(searchfield.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">MY PROJECTS</h1>\n      <SearchBox placeholder=\"search projects\" handleChange={handleChange} />\n      <CardList projects={filteredProjects} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}