{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","project","url","key","id","name","language","CardList","projects","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAGaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,gCAAQ,yBAAKC,IAAI,UAAUC,IAAKH,EAAMI,QAAQC,OAC9C,wBAAIC,IAAKN,EAAMI,QAAQG,IAAvB,IAA6BP,EAAMI,QAAQI,KAA3C,KACA,2BAAIR,EAAMI,QAAQK,aCHbC,EAAW,SAAAV,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACvB,kBAAC,EAAD,CAAME,IAAI,aAAaF,QAASA,SCJ/BS,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCyEjEG,E,kDAvEb,aAAc,IAAD,8BACX,gBAiDFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjDtC,EAAKC,MAAQ,CACXb,SAAU,CACR,CACEH,KAAM,cACND,GAAI,MACJE,SAAU,wBACVJ,IAAI,8IAEN,CACEG,KAAM,iBACND,GAAI,MACJE,SAAU,wBACVJ,IAAI,gHAEN,CACEG,KAAM,iBACND,GAAI,MACJE,SAAU,wBACVJ,IAAI,iGAEN,CACEG,KAAM,cACND,GAAI,MACJE,SAAU,sBACVJ,IAAI,8FAEN,CACEG,KAAM,WACND,GAAI,MACJE,SAAU,wBACVJ,IAAI,uEAEN,CACEG,KAAM,YACND,GAAI,MACJE,SAAU,eACVJ,IAAI,oFAEN,CACEG,KAAM,UACND,GAAI,MACJE,SAAU,iBACVJ,IAAI,yKAGRgB,YAAa,IA/CJ,E,qDAqDJ,IAAD,EAC0BI,KAAKD,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXK,EAAmBf,EAASgB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQI,KAAKoB,cAAcC,SAASR,EAAYO,kBAGlD,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CACEa,YAAc,kBACdC,aAAgBU,KAAKV,eAEvB,kBAAC,EAAD,CAAUJ,SAAUe,S,GAlEVI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80444a1d.chunk.js","sourcesContent":["import React from 'react';\nimport './card.component.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <center><img alt='project' src={props.project.url}></img></center>\n        <h1 key={props.project.id}> {props.project.name} </h1>\n        <p>{props.project.language}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.component.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.projects.map(project => (\n            <Card key=\"project.id\" project={project} />\n        ))}\n    </div>\n);","import React from 'react';\nimport './search-box.component.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n);","import React from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      projects: [\n        {\n          name: 'Corona Test',\n          id: 'pr1',\n          language: 'Written in JavaScript',\n          url: `https://cdn.thewire.in/wp-content/uploads/2020/03/18145644/2020-03-18T080827Z_1_LYNXMPEG2H0RA_RTROPTP_4_HEALTH-CORONAVIRUS-USA-180x180.jpg`\n        },\n        {\n          name: 'Simple Weather',\n          id: 'pr2',\n          language: 'Written in JavaScript',\n          url: `https://raw.githubusercontent.com/RohanLodhi/weather/d8690115ecb8cdd7a473e5031bd75f125bbb4fdc/imgs/night.svg`\n        },\n        {\n          name: 'Router Library',\n          id: 'pr3',\n          language: 'Written in JavaScript',\n          url: `https://moduscreate.com/wp-content/uploads/2018/04/extjs-react-how-to-configure-routes-00.jpg`\n        },\n        {\n          name: 'Flappy Bird',\n          id: 'pr4',\n          language: 'Python with Pygames',\n          url: `https://cdn.thedailymash.co.uk/wp-content/uploads/20190309170536/flappybird425-180x180.jpg`\n        },\n        {\n          name: 'ToDo pwa',\n          id: 'pr5',\n          language: 'Written in JavaScript',\n          url: `http://icon-library.com/images/todo-list-icon/todo-list-icon-20.jpg`\n        },\n        {\n          name: 'Portfolio',\n          id: 'pr6',\n          language: 'HTML and CSS',\n          url: `https://d28wu8o6itv89t.cloudfront.net/images/portfolioimagepng-1539955824667.png`\n        },\n        {\n          name: 'Hangman',\n          id: 'pr7',\n          language: 'Python and C++',\n          url: `https://media.istockphoto.com/photos/hangman-sketched-on-blackboard-picture-id466313780?k=6&m=466313780&s=612x612&w=0&h=Wpx_vgPCyt3oEJ5CIAhHxVfWlqdRfXrAfsHX4MbPfe8=`\n        }\n      ],\n      searchField: ''\n    };\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  render(){\n    const {projects, searchField} = this.state;\n    const filteredMonsters = projects.filter(project =>(\n      project.name.toLowerCase().includes(searchField.toLowerCase())\n    ));\n\n    return (\n      <div className=\"App\">\n        <SearchBox \n          placeholder = 'search projects'\n          handleChange = {this.handleChange}\n        />\n        <CardList projects={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}